#include "dkli.dkh"
#!
program
{
    #include "functions.dkh"
    #include "serialize.dkh"

    #include "ddm.json.dkl"

    /*  Punto de entrada del programa
        Argumentos de línea de comando: 
            dkl dbgen src=origen fmt=formato_salida out=salida
            - origen Es un archivo (incluyendo ruta) dkl con la definición de la estructura
            - formato de salida Es el nombre de un programa existente que produce sql o la etiqueta 'json_schema', si se omite se asume 'json_schema'
              para el formato intermedio
            - salida Es un archivo en el que se escribirá el resultado o bien si se omite, se imprime en la consola
        
        Ejemplos:
         dkl dbgen src=mibasededatos.dkl fmt=mysql out=script.sql
    */

    ref args=commandline("=")

    if not(file.exists(@@(args,"$src")))
        {do rise_error(0,"No existe el archivo de origen o no se ha indicado el parámetro")}

    xml=runscript(@@(args,"src"))

    ref obj=parse.xmlStr(xml)

    ref abstracts=record.create()
    ref tables=record.create()

    ref nodes=@@(obj,"&nodes")

    if isnull(nodes) { do rise_error("No hay objetos de bases de datos definidos") }

    ref objectNodes=list.create()
    //Recuperar definiciones en inclusiones de sub-modelos
    do addObjects(objectNodes,nodes)

    //Recuperar las abstracciones
    for i=0;i<@count(objectNodes)   
    {
        ref o=@item(objectNodes,i)
        if @@(o,"name")==@ABSTRACT
        {
            abstracts<@@(o,"attributes/name")+"*">:createTableObject(o,abstracts)
        }
    }

    //Recuperar las entidades
    for i=0;i<@count(objectNodes)   
    {
        ref o=@item(objectNodes,i)
        if @@(o,"name")==@ENTITY
        {
            tables<@@(o,"attributes/name")+"*">:createTableObject(o,abstracts)
        }
    }

    new schema
    {
        @"name":@@(obj,"$attributes/name")
        @"tables*":tables
    }

    do fixColumns(schema)

    if @@(args,"$fmt")=="" || @@(args,"$fmt")=="json_schema"
    {
        output=to.json(schema)
    }
    else
    {
        new context
        {
            @"args*":args
            @"schema*":schema
            @"output":"standard" //Si el programa cambia este valor a 'text', el resultado estará en el miembro 'text'
        }

        output=runscript(@@(args,"$fmt"),"context",context)

        switch @@(context,"$output")
        {
            case "text"
            {
                output=@@(context,"$text")
            }
        }
    }
    

    fout=@@(args,"$out")

    if (fout=="")
        { do print(output)}
    else
    { do file.wtext(fout,output) }
}