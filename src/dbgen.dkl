#include "dkli.dkh"
#!
program
{
    #include "functions.dkh"
    #include "serialize.dkh"

    #include "ddm.json.dkl"

    /*  Punto de entrada del programa
        Argumentos de línea de comando: 
            dkl dbgen src=origen fmt=formato_salida out=salida
            - origen Es un archivo (incluyendo ruta) dkl con la definición de la estructura
            - formato de salida Es el nombre de un programa existente que produce sql o la etiqueta 'json_schema', si se omite se asume 'json_schema'
              para el formato intermedio
            - salida Es un archivo en el que se escribirá el resultado o bien si se omite, se imprime en la consola
        
        Ejemplos:
         dkl dbgen src=mibasededatos.dkl fmt=mysql out=script.sql
    */

    ref args=commandline("=")

    srcA = @@(args,"$a")
    srcB = @@(args,"$b")
    fsrc = @@(args,"$src")
    fout = @@(args,"$out")
    dout = dir.name(fout)

    ACTION = 0
    TABLES = 1
    COMPATIBILITY = 2

    if field.exist(args,"src") { ACTION = TABLES }
    if field.exist(args,"a") || field.exist(args,"b") { ACTION = COMPATIBILITY }

    generador = tolower(trim(@@(args,"$fmt")))
    if containsword(generador,"mysql,gen_mysql,gen_mysql.dkl") { args<"fmt"> : "gen_mysql.dkl" }
    else if containsword(generador,"sqlserver,gen_sqlserver,gen_sqlserver.dkl") { args<"fmt"> : "gen_sqlserver.dkl" }
    else { args<"fmt"> : "" }

    ref schema = @null

    switch ACTION
    {
        case TABLES
        {
            if not(file.exists(fsrc)) { do rise_error(1,"No existe el archivo de origen, o no se ha indicado el parámetro.") }
            if not(dir.exists(dout)) { do rise_error(1,"No existe la ruta de salida, o no se ha indicado el parámetro.") }
            ref schema = getTableSchema(fsrc)
            break
        }
        case COMPATIBILITY
        {
            if not(file.exists(srcA)) { do rise_error(1,"No existe el archivo fuente a, o no se ha indicado el parámetro.") }
            if not(file.exists(srcB)) { do rise_error(1,"No existe el archivo fuente b, o no se ha indicado el parámetro.") }
            if not(dir.exists(dout)) { do rise_error(1,"No existe la ruta de salida, o no se ha indicado el parámetro.") }

            fil = trim(@@(args,"$c"))
            ref filter = if(fil=="", @null, split(fil,","))
            ref schema = ddm.analyze(srcA,srcB,filter)

            ref new_tables = ifnull(@@(schema,"&analysis/new"),list.create())
            if list.count(new_tables) > 0 {
                // ref cur_ddm = from.json(file.rtext(srcA))
                ref new_ddm = from.json(file.rtext(srcB))
            
                new tables
                go foreach.lstr(value:tbl) with(new_tables)
                {
                    tables<tbl+"*"> : @@(new_ddm,"&tables/"+tbl)
                }

                schema<"tables*"> : tables
            }
            break
        }
        default { do rise_error(1,"Debe indicar un archivo de origen (src, a, b).") }
    }
    
    if @@(args,"$fmt")=="" || @@(args,"$fmt")=="json_schema"
    {
        output=to.json(schema)
    }
    else
    {
        new context
        {
            @"args*":args
            @"schema*":schema
            @"output":"standard" //Si el programa cambia este valor a 'text', el resultado estará en el miembro 'text'
        }

        output=runscript(@@(args,"$fmt"),"context",context)

        switch @@(context,"$output")
        {
            case "text"
            {
                output=@@(context,"$text")
            }
        }

        json_name = file.justname(fout) + ".json"
        file_json = path.concat(dout,json_name)
        
        do file.wtext(file_json,to.json(schema))
    }
    
    do file.wtext(fout,output)
}