#include "dkli.dkh"
#!
program "dbgen"
{
    #include "functions.dkh"
    #include "serialize.dkh"
    #include "dbr.dkh"

    #include "ddm.json.dkl"
    #include "ddm.mysql.dkl"
    #include "dbm.dkl"

    ref args=commandline("=")

    srcA = @@(args,"$a")
    srcB = @@(args,"$b")
    fsrc = @@(args,"$src")
    fout = @@(args,"$out")
    dout = dir.name(fout)
    cnn = @@(args,"$db")
    fmt = tolower(trim(@@(args,"$fmt")))
    gen = ""

    ACTION = 0
    TABLES = 1
    COMPATIBILITY = 2
    INFER = 3

    if field.exist(args,"src") { ACTION = TABLES }
    else if field.exist(args,"a") || field.exist(args,"b") { ACTION = COMPATIBILITY }
    else if field.exist(args,"db") {
        if fmt == "" { fmt = "ddm" }
        ACTION = INFER
    }

    if isanyword(fmt,",json,json_schema") { fmt = "json" }
    else if isanyword(fmt,"mysql,gen_mysql,gen_mysql.dkl") {
        gen = "gen_mysql.dkl"
        fmt = "sql"
    }
    else if isanyword(fmt,"sqlserver,gen_sqlserver,gen_sqlserver.dkl") {
        gen = "gen_sqlserver.dkl"
        fmt = "sql"
    }

    ref schema = @null
    output = ""

    switch ACTION
    {
        case TABLES
        {
            if not(file.exists(fsrc)) { do rise_error(1,"No existe el archivo de origen, o no se ha indicado el parámetro.") }
            if not(dir.exists(dout)) { do rise_error(1,"No existe la ruta de salida, o no se ha indicado el parámetro.") }
            
            ref schema:getTableSchema(fsrc)
            break
        }
        case COMPATIBILITY
        {
            if not(file.exists(srcA)) { do rise_error(1,"No existe el archivo fuente a, o no se ha indicado el parámetro.") }
            if not(file.exists(srcB)) { do rise_error(1,"No existe el archivo fuente b, o no se ha indicado el parámetro.") }
            if not(dir.exists(dout)) { do rise_error(1,"No existe la ruta de salida, o no se ha indicado el parámetro.") }

            fil = trim(@@(args,"$c"))
            ref filter = if(fil=="", @null, split(fil,","))
            ref schema:ddm.analyze(srcA,srcB,filter)
            break
        }
        case INFER
        {
            if not(dir.exists(dout)) { do rise_error(1,"No existe la ruta de salida, o no se ha indicado el parámetro.") }

            ref db = dbr.open(@@(args,"$db"))

            if fmt == "json" {
                ref schema:dbm.getSchema(db,@@(args,"$schema"))
            }
            else {
                output = dbm.getDDM(db,@@(args,"$schema"))
            }

            do dbr.close(db)
            exception
            {
                if isset(db) {
                    if dbr.is_open(db){ do dbr.close(db) }
                }
                do rise_error(last_error_code(),last_error())
            }
            break
        }
        default { do rise_error(1,"Debe indicar un origen (db, src, a, b).") }
    }

    switch fmt
    {
        case "sql"
        {
            new context
            {
                @"args*":args
                @"schema*":schema
                @"output":"standard" //Si el programa cambia este valor a 'text', el resultado estará en el miembro 'text'
            }

            output=runscript(gen,"context",context)
            if @@(context,"$output")=="text" { output=@@(context,"$text") }

            json_name = file.justname(fout) + ".json"
            file_json = path.concat(dout,json_name)
            
            do file.wtext(file_json,to.json(schema))
            break
        }
        case "json"
        {
            if not(isnull(schema)) { output=to.json(schema) }
            break
        }
    }
    
    do file.wtext(fout,output)
}