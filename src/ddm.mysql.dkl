#include "dkli.dkh"
#!
program
{
    #include "functions.dkh"
    #include "serialize.dkh"

    create_tables::&tables, &sentences
    {
        if isnull(tables) { return }

        ref lt=list.create_from_fields(tables)

        for i=0;i<@count(lt)
        {
            sql=create_table(@@(tables, "&"+list.str(lt,i)))
            if trim(sql)!="" { do list.add(sentences,sql) }
        }
    }

    create_references::&tables, &sentences
    {
        if isnull(tables) { return }

        ref lt=list.create_from_fields(tables)

        for i=0;i<@count(lt)
        {
            ref t=@@(tables,"&"+ list.str(lt,i))
            ref lf=list.create_from_fields(@@(t,"&columns"))

            for j=0;j<@count(lf)
            {
                ref f=@@(t,"&columns/"+list.str(lf,j))
                sql=create_reference(get_name(t), f, tables )
                if trim(sql)!="" { do list.add(sentences,sql) }
            }
        }
    }

    create_reference::table, &column, &tables
    {
        if @@(column,"$reference")=="" {return "" }

        return "ALTER TABLE `"+table+"` ADD FOREIGN KEY (`"+get_name(column)+"`) REFERENCES `"+get_name(@@(tables,"&"+@@(column,"$reference")))+"`(`"+@@(column,"$keyfield")+"`);"

        exception{do print(last_error())}

        return ""
    }

    create_indexes::&tables, &sentences
    {
        if isnull(tables) { return }

        ref lt=list.create_from_fields(tables)

        for i=0;i<@count(lt)
        {
            ref li=list.create_from_fields(@@(tables,"&"+list.str(lt,i)+"/indexes"))
            for j=0;j<@count(li)
            {
                tn=get_name( @@(tables,"&"+list.str(lt,i)) )
                ref idxo=@@(tables, "&"+ list.str(lt,i)+"/indexes/" + list.str(li,j) )
                sql=create_index(tn ,idxo)
                if trim(sql)!="" { do list.add(sentences,sql) }
            }
        }
    }

    create_index::table, &idx
    {
        sql= "CREATE"+ifstr(tolower(@@(idx,"$type"))=="unique"," UNIQUE", "")+" INDEX `"+get_name(idx)+"` ON `"+table+"`"
        sql=sql+" ("

        ref cols=@@(idx,"&columns")
        ref lc=list.create_from_fields(cols)

        for i=0;i<@count(lc)
        {
            sql=sql+ifstr(i>0,", ","")+"`"+get_name(@@(cols,"&"+list.str(lc,i)))+"`" + ifstr(@@(cols,"#"+list.str(lc,i)+"/desc")," DESC","")
        }
        sql=sql+");"
        return sql
    }

    get_name::&obj
    {
        return ifstr(@@(obj,"$alias")!="", @@(obj,"$alias"), @@(obj,"$name"))
    }

    get_type::&field
    {
        switch @@(field,"type")
        {
            case "bool" { return "BOOL" }
            case "int" { return "INT" }
            case "memo" { return "TEXT" }
            case "mmemo" { return "MEDIUMTEXT" }
            case "lmemo" { return "LONGTEXT" }
            case "datetime" { return "DATETIME" }
            case "time" { return "TIME" }
            case "date" { return "DATE" }
            case "decimal" { return "DECIMAL("+@@(field,"$precision")+","+@@(field,"$scale")+")" }
            case "string" 
            { 
                if @@(field,"#size")>4096
                {
                    return "TEXT"
                }
                else { return "VARCHAR("+@@(field,"$size")+")" }
            }
        }

        return @@(field,"$type") + ifstr(@@(field,"#size")!=0,"("+@@(field,"$size")+")","")
    }

    create_field::&field
    {
        sql="`"+get_name(field) +"` "+ get_type(field)
        return sql
    }

    create_table::&table
    {
        table_name=get_name(table)        
        sql= "CREATE TABLE `"+table_name+"`(\r\n"

        ref lf=list.create_from_fields(@@(table,"&columns"))
        for i=0;i<@count(lf)
        {
            sql=sql + ifstr(i>0,",\r\n\t","\t") + create_field(@@(table,"&columns/"+list.str(lf,i)))
            if @@(table,"#columns/"+list.str(lf,i)+"/isRequired") { sql=sql+" NOT NULL" }
            if @@(table,"#columns/"+list.str(lf,i)+"/isAutoIncrement") { sql=sql+" AUTO_INCREMENT" }
            if @@(table,"#columns/"+list.str(lf,i)+"/isUnique") { sql=sql+" UNIQUE" }
            if @@(table,"#columns/"+list.str(lf,i)+"/isKey") { sql=sql+" PRIMARY KEY" }
        }

        return sql+"\r\n);"
    }

    //#region Compatibilidad DDM
    get_definition::act
    {
        type = ifstr(@@(act,"$type")=="", @@(act,"$comp_type"), @@(act,"$type"))
        precision = if(@@(act,"#precision")==0, @@(act,"#comp_precision"), @@(act,"#precision"))
        scale = if(@@(act,"#scale")==0, @@(act,"#comp_scale"), @@(act,"#scale"))
        size = if(@@(act,"#size")==0, @@(act,"#comp_size"), @@(act,"#size"))

        definition = ""

        new types
        {
            @"bool": "BOOL"
            @"int": "INT"
            @"memo": "TEXT"
            @"mmemo": "MEDIUMTEXT"
            @"lmemo": "LONGTEXT"
            @"datetime": "DATETIME"
            @"time": "TIME"
            @"date": "DATE"
            @"decimal": "DECIMAL("+str(precision)+","+str(scale)+")"
            @"string": ifstr(size > 4096, "TEXT", "VARCHAR("+str(size)+")")
            @"default": toupper(type) + ifstr(size!=0, "("+str(size)+")", "")
        }

        definition = field.dstr(types, type, @@(types,"$default"))
        if @@(act,"#isAutoIncrement") { definition = definition + " AUTO_INCREMENT" }
        if @@(act,"#isRequired") { definition = definition + " NOT NULL" }
        if @@(act,"#isUnique") { definition = definition + " UNIQUE" }
        if @@(act,"#isKey") { definition = definition + " PRIMARY KEY" }

        return definition
    }

    new_column::data
    {
        SQL_ADD_SINTAX = "ALTER TABLE `#<table>` ADD `#<column>` #<definition>"
        
        table = @@(data,"$table")
        column = @@(data,"$column")
        definition = get_definition(@@(data,"&new"))

        return trim(ftext(SQL_ADD_SINTAX))+";"
    }

    change_column::data
    {
        SQL_ALTER_SINTAX = "ALTER TABLE `#<table>` MODIFY COLUMN `#<column>` #<definition>"

        table = @@(data,"$table")
        column = @@(data,"$column")
        definition = get_definition(@@(data,"&change"))

        return trim(ftext(SQL_ALTER_SINTAX))+";"
    }

    create_actions::&actions, &sentences
    {
        go foreach.lobj(value:act) with(actions)
        {
            switch @@(act,"action")
            {
                case "new"
                {
                    sql = new_column(act)
                    do list.add(sentences,sql)
                    break
                }
                case "change"
                {
                    sql = change_column(act)
                    do list.add(sentences,sql)
                    break
                }
                case "incompatible" { do print(to.json(act)) }
            }
        }
    }
    //#endregion

    actions2mysql::&tables,&sentences
    {
        if isnull(tables) { return }

        for i = 0; i < list.count(tables); i+1
        {
            ref table = list.obj(tables,i)
            do create_actions(@@(table,"&actions"),sentences)
        }
    }

    tables2mysql::&tables,&sentences
    {
        if isnull(tables) { return }

        do create_tables(tables,sentences)
        do create_indexes(tables,sentences)
        do create_references(tables,sentences)   
    }

    schema2mysql::&schema
    {
        ref sentences = list.create()

        do tables2mysql(@@(schema,"&tables"),sentences)
        do actions2mysql(@@(schema,"&compatibility"),sentences)

        return sentences
    }

    getSQL::&schema
    {
        if isnull(schema) { return }
        
        ref sentences = schema2mysql(schema)
        ref buffer = text.create()
        
        for i = 0; i < @count(sentences)
        {
            do text.say(buffer,list.str(sentences,i))
        }

        return trim(text.get(buffer))
    }
}