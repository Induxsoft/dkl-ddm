#include "dkli.dkh"
#pattern function "function '$name' ()"
#!
program "dbm"
{
    #include "functions.dkh"
    #include "serialize.dkh"
    #include "dbr.dkh"

    #include "ddm.json.dkl"
    #include "ddm.mysql.dkl"

    do _map_function(-1, "System.IO.Path", "GetTempPath", "GetTempPath", "", "$")
    // do _map_function(-1, "System.IO.Directory", "GetCurrentDirectory", "GetCurrentDirectory", "", "$")

    function dbm.getEngineType(qname)
    {
        ref info = dba.getconnection(qname)
        return @@(info,"$Engine")
    }

    function dbm.vQname(qname)
    {
        if dba.cnnexists(qname) { return @true }

        ref qn = split(qname,"@")
        cnn = list.str(qn,0)
        app = list.str(qn,1)

        list_apps = to.json(dba.apps(""))
        if not(contains(list_apps,app)) { do rise_error(1,"No se encontro el grupo de conexiones " + app) }
        list_cnns = to.json(dba.cnns(app))
        if not(contains(list_cnns,cnn)) { do rise_error(1,"No se encontro la conexión " + cnn) }
    }

    function dbm.createLogTables(&db)
    {
        ref schema = getTableSchema("dbm.sys_tables.ddm")
        sql_create_dbm_sys_tables = getSQL(schema)

        do dbr.execute(db,sql_create_dbm_sys_tables,@null)
    }

    function dbm.existLogTables(&db)
    {
        exist = @false

        ref tbl1 = dbr.rec(db,"SHOW TABLES LIKE 'sys_model_log';",@null)
        ref tbl2 = dbr.rec(db,"SHOW TABLES LIKE 'sys_model_ddl_log';",@null)

        if not(isnull(tbl1)) && not(isnull(tbl2)) { exist = @true }

        return exist
    }

    function dbm.checkLogTables(&db)
    {
        if not(dbm.existLogTables(db)) { do dbm.createLogTables(db) }
    }

    function dbm.insert_sys_model_ddl_log(&db,fk,act,sql,&json,res,msg)
    {
        new sys_model_ddl_log
        {
            @"sys_pk": 0
            @"sys_guid": uuid()
            @"sys_dtcreated*": now()
            @"sys_timestamp*": now()
            @"ref_model_log": fk
            @"action": act
            @"cmdsql": sql
            @"jsondef": to.json(json)
            @"success": res
            @"message": msg
        }
        do dbr.insert(db,"sys_model_ddl_log",sys_model_ddl_log)
    }

    function dbm.updateModel(&cur,&def,act)
    {
        // if not(field.exist(cur,"analysis")) { cur<"analysis*"> : record.create() }
        // if not(field.exist(cur,"tables")) { cur<"tables*"> : record.create() }
        // if not(field.exist(cur,"compatibility")) { cur<"compatibility*"> : list.create() }

        // ref def_analysis = ifnull(@@(def,"&analysis"), record.create())
        // ref def_tables = ifnull(@@(def,"&tables"), record.create())
        // ref def_compatibility = ifnull(@@(def,"&compatibility"), list.create())

        switch act
        {
            case "new_table"
            {
                tname = @@(def,"$name")
                cur<"tables/"+tname+"*"> : def
                break
            }
            case "new_column"
            {
                tname = @@(def,"$table")
                fname = @@(def,"$column")
                ref field = @@(def,"&new")

                cur<"tables/"+tname+"/columns/"+fname+"*"> : field
                break
            }
            case "change_column"
            {
                tname = @@(def,"$table")
                fname = @@(def,"$column")
                ref change = @@(def,"&change")
                type = @@(change,"$comp_type")
                path = "tables/"+tname+"/columns/"+fname+"/"

                cur<path+"type"> : type
                
                if type == "string"
                {
                    cur<path+"size"> : @@(change,"#comp_size")
                }
                else if type == "decimal"
                {
                    cur<path+"precision"> : @@(change,"#comp_precision")
                    cur<path+"scale"> : @@(change,"#comp_scale")
                }
                else
                {
                    if @@(change,"#comp_size") > 0 { cur<path+"size"> : @@(change,"comp_size") }
                }
                break
            }
        }

        // cur<"analysis*"> : def_analysis
        
        // go foreach.fobj(key:tname, value:tdata) with(def_tables)
        // {
        //     cur<"tables/"+tname+"*"> : tdata
        // }

        // // cur<"compatibility*"> : def_compatibility
        // go foreach.lobj(value:ctables) with(def_compatibility)
        // {
        //     do list.add(@@(cur,"&compatibility"),ctables)
        // }
    }

    function dbm.vCompatibility(&schema)
    {
        compatible = @true
        if not(field.exist(schema,"compatibility")) { return compatible }
        
        ref compatibility = ifnull(@@(schema,"&compatibility"),list.create())
        do print("Iniciando analisis.")
        go foreach.lobj(value:tables) with(compatibility)
        {
            if not(@@(tables,"#compatible")) {
                ref actions = ifnull(@@(tables,"&actions"), list.create())
                for m = 0; m < list.count(actions); m+1
                {
                    ref act = list.obj(actions,m)
                    if @@(act,"$action") == "incompatible" {
                        do print(to.json(act))
                        compatible = @false
                    }
                }
            }
        }
        do print("Analisis completado.")
        return compatible
    }

    function dbm.installModel(&db,modelid,jsonmodel)
    {
        do dbm.checkLogTables(db)

        ref schema = jsonmodel

        str_model = dbr.str(db,"SELECT IFNULL((SELECT model FROM sys_model_log WHERE model IS NOT NULL ORDER BY sys_pk DESC LIMIT 1),'{}') AS model;",@null)
        ref current_model = from.json(str_model)
        if list.count(list.create_from_fields(current_model)) > 0 
        {
            temp_folder = GetTempPath()
            temp_name_a = uuid() + ".json"
            temp_name_b = uuid() + ".json"
            temp_fsrc_a = path.concat(temp_folder,temp_name_a)
            temp_fsrc_b = path.concat(temp_folder,temp_name_b)

            do file.wtext(temp_fsrc_a,to.json(current_model))
            do file.wtext(temp_fsrc_b,to.json(jsonmodel))

            ref schema = ddm.analyze(temp_fsrc_a, temp_fsrc_b, @null)

            do file.delete(temp_fsrc_a)
            do file.delete(temp_fsrc_b)
        }
        else
        {
            ref current_model = jsonmodel
        }

        if field.exist(schema,"tables/sys_model_log") { do field.remove(schema,"tables/sys_model_log") }
        if field.exist(schema,"tables/sys_model_ddl_log") { do field.remove(schema,"tables/sys_model_ddl_log") }

        ref analisys = ifnull(@@(schema,"&analysis"),record.create())
        ref compatibility = ifnull(@@(schema,"&compatibility"),list.create())
        ref tables = ifnull(@@(schema,"&tables"),record.create())

        ref lst_idx = list.create()
        ref lst_ref = list.create()

        new sys_model_log
        {
            @"sys_pk": 0
            @"sys_guid": uuid()
            @"sys_dtcreated*": now()
            @"sys_timestamp*": now()
            @"source": modelid
            @"install": to.json(jsonmodel)
            @"analisys": to.json(analisys)
            @"compatible": @false
            @"success": @false
            @"model*": @null
        }
        
        if list.count(compatibility) > 0 {
            ref fo = list.obj(compatibility,0)
            sys_model_log<"compatible"> : @@(fo,"#compatible")
        }
        
        do dbr.insert(db,"sys_model_log",sys_model_log)
        LAST_ID = dbr.num(db,"SELECT MAX(sys_pk) FROM sys_model_log",@null)
        new params { @"id": LAST_ID }

        compatible = @true
        if not(dbm.vCompatibility(schema)) {
            compatible = @false
            if not(compatible) { do rise_error(99,"No es posible instalar el modelo, se encontraron incompatibilidades.") }
        }

        // Inicia proceso de instalación del nuevo modelo
        // Nuevas tablas
        ref lt = list.create_from_fields(tables)
        for i = 0; i < list.count(lt); i+1
        {
            tname = list.str(lt,i)
            ref tdata = field.obj(tables,tname)

            ref columns = ifnull(@@(tdata,"&columns"),record.create())
            ref indexes = ifnull(@@(tdata,"&indexes"),record.create())
            ref lf = list.create_from_fields(columns)
            ref li = list.create_from_fields(indexes)

            // Obtener SQL CREATE TABLE
            sql_create_table = trim(create_table(tdata))
            do dbr.execute(db,sql_create_table,@null)
            do dbm.insert_sys_model_ddl_log(db,LAST_ID,"create_table",sql_create_table,tdata,@true,"")
            do dbm.updateModel(current_model,tdata,"new_table")
            do print("tabla creada: " + tname)

            // Obtener SQL CREATE INDEX
            for m = 0; m < list.count(li)
            {
                ref index = @@(indexes,"&"+list.str(li,m))
                new obj
                {
                    @"tbl": tname
                    @"idx*": index
                    @"sql": trim(create_index(tname,index))
                }
                do list.add(lst_idx,obj)
            }
            // Obtener SQL FOREIGN KEY
            for n = 0; n < list.count(lf)
            {
                ref column = @@(columns,"&"+list.str(lf,n))
                if @@(column,"$reference") != "" {
                    new obj
                    {
                        @"tbl": tname
                        @"col*": column
                        @"sql": trim(create_reference(tname,column,tables))
                    }
                    do list.add(lst_ref,obj)
                }
            }

            exception
            {
                code = last_error_code()
                error = last_error()

                do dbm.insert_sys_model_ddl_log(db,LAST_ID,"create_table",sql_create_table,tdata,@false,error)
                do rise_error(code,error)
            }
        }
        // Crear indices de las nuevas tablas
        go foreach.lobj(value:index) with(lst_idx)
        {
            ref idx = @@(index,"&idx")
            sql_idx = @@(index,"$sql")

            do dbr.execute(db,sql_idx,@null)
            do dbm.insert_sys_model_ddl_log(db,LAST_ID,"create_index",sql_idx,idx,@true,"")
            do print("nuevo indice: " + @@(idx,"$name") + " en " + @@(index,"$tbl"))

            exception
            {
                code = last_error_code()
                error = last_error()

                do dbm.insert_sys_model_ddl_log(db,LAST_ID,"create_index",sql_idx,idx,@false,error)
                do rise_error(code,error)
            }
        }
        // Crear referencias (FK) de las nuevas tablass
        go foreach.lobj(value:reference) with(lst_ref)
        {
            ref col = @@(reference,"&col")
            sql_ref = @@(reference,"$sql")

            do dbr.execute(db,sql_ref,@null)
            do dbm.insert_sys_model_ddl_log(db,LAST_ID,"create_reference",sql_ref,col,@true,"")
            do print("nuevo fk: " + @@(reference,"$tbl") + "." + @@(col,"$name") + " a " + @@(col,"$reference") + "." + @@(col,"$keyfield"))

            exception
            {
                code = last_error_code()
                error = last_error()

                do dbm.insert_sys_model_ddl_log(db,LAST_ID,"create_reference",sql_ref,col,@false,error)
                do rise_error(code,error)
            }
        }

        // Tablas comparadas
        for i = 0; i < list.count(compatibility); i+1
        {
            ref item = list.obj(compatibility,i)
            ref actions = ifnull(@@(item,"&actions"), list.create())
            // Columnas comparadas
            for m = 0; m < list.count(actions); m+1
            {
                ref act = list.obj(actions,m)
                // Acción determinada
                switch @@(act,"$action")
                {
                    case "new"
                    {
                        sql = new_column(act)
                        do dbr.execute(db,sql,@null)
                        do dbm.insert_sys_model_ddl_log(db,LAST_ID,"new_column",sql,act,@true,"")
                        do dbm.updateModel(current_model,act,"new_column")
                        do print("nuevo campo: " + @@(act,"$column") + " en " + @@(act,"$table"))
                        
                        exception
                        {
                            code = last_error_code()
                            error = last_error()

                            do dbm.insert_sys_model_ddl_log(db,LAST_ID,"new_column",sql,act,@false,error)
                            do rise_error(code,error)
                        }
                        break
                    }
                    case "change"
                    {
                        sql = change_column(act)
                        do dbr.execute(db,sql,@null)
                        do dbm.insert_sys_model_ddl_log(db,LAST_ID,"change_column",sql,act,@true,"")
                        do dbm.updateModel(current_model,act,"change_column")
                        do print("campo modificado: " + @@(act,"$column") + " en " + @@(act,"$table"))
                        
                        exception
                        {
                            code = last_error_code()
                            error = last_error()

                            do dbm.insert_sys_model_ddl_log(db,LAST_ID,"change_column",sql,act,@false,error)
                            do rise_error(code,error)
                        }
                        break
                    }
                    case "incompatible"
                    {
                        do print(to.json(act))
                        do dbm.insert_sys_model_ddl_log(db,LAST_ID,"incompatible","",act,@false,@@(act,"$message"))
                        exception{/*ignore*/}
                        break
                    }
                }
            }
        }
        // Fin del proceso de instalación del nuevo modelo

        new cols_to_update
        {
            @"sys_timestamp*": now()
            @"compatible": @true
            @"success": @true
            @"model": to.json(current_model)
        }
        do dbr.update(db,"sys_model_log",cols_to_update,"sys_pk = @id",params)

        ref result = dbr.rec(db,"SELECT * FROM sys_model_log WHERE sys_pk = @id",params)
        
        do dbr.close(db)
        do print("Modelo instalado con éxito")
        return @true

        exception
        {
            if isset("db") {
                if dbr.is_open(db) {
                    if dbr.in_transaction(db) { do dbr.rollback(db) }

                    if isset("params") && compatible {
                        new cols_to_update
                        {
                            @"sys_timestamp*": now()
                            @"model": to.json(current_model)
                        }
                        do dbr.update(db,"sys_model_log",cols_to_update,"sys_pk = @id",params)
                        
                        ref result = dbr.rec(db,"SELECT * FROM sys_model_log WHERE sys_pk = @id",params)
                    }

                    do dbr.close(db)
                }
            }
            do print(last_error())
            return @false
        }
    }

    function dbm.showLastError(qname)
    {
        ref db = dbr.open(qname)
        do dbm.checkLogTables(db)

        last_error = dbr.str(db,"SELECT message FROM sys_model_ddl_log WHERE NOT IFNULL(success,0) ORDER BY sys_pk DESC LIMIT 1;",@null)
        if trim(last_error) == "" { last_error = "No se encontraron errores." }

        do dbr.close(db)
        do print(last_error)

        exception
        {
            if dbr.is_open(db){ do dbr.close(db) }
            do rise_error(last_error_code(),last_error())
        }
    }

    function dbm.showModel(qname)
    {
        ref db = dbr.open(qname)
        // do dbm.checkLogTables(db)

        last_model = dbr.str(db,"SELECT IFNULL((SELECT model FROM sys_model_log WHERE model IS NOT NULL ORDER BY sys_pk DESC LIMIT 1),'{}') AS model;",@null)

        do dbr.close(db)
        do print(last_model)

        exception
        {
            if dbr.is_open(db){ do dbr.close(db) }
            do rise_error(last_error_code(),last_error())
        }
    }

    function dbm.inferModel(qname)
    {
        ref db = dbr.open(qname)
        do dbm.checkLogTables(db)

        ref info = dba.getconnection(qname)
        do print("Modelo obtenido.")

        // Iniciar schema.
        new schema
        {
            @"name": @@(info,"$DefaultSchema")
            @"tables*": record.create()
        }

        do print("Iniciando lectura, espere un momento por favor.")
        // Obtener las tablas de una base de datos.
        sql_list_tables = "SELECT t.TABLE_SCHEMA, t.TABLE_NAME FROM information_schema.`TABLES` t WHERE t.TABLE_SCHEMA = @DefaultSchema AND t.TABLE_NAME NOT IN ('sys_model_log','sys_model_ddl_log');"
        ref lstTables = dbr.list(db,sql_list_tables,info)
        
        for i = 0; i < list.count(lstTables); i+1
        {
            ref table = list.obj(lstTables,i)
            tname = @@(table,"$TABLE_NAME")

            // Crear objeto para una nueva tabla.
            new otable
            {
                @"name": tname
                @"columns*": record.create()
                @"indexes*": record.create()
            }

            // Obtener las columnas de una tabla.
            sql_list_columns = "SELECT c.TABLE_SCHEMA, c.TABLE_NAME, c.COLUMN_NAME, c.DATA_TYPE, IFNULL(c.CHARACTER_MAXIMUM_LENGTH,0) CHARACTER_MAXIMUM_LENGTH, IFNULL(c.NUMERIC_PRECISION,0) NUMERIC_PRECISION, IFNULL(c.NUMERIC_SCALE,0) NUMERIC_SCALE, c.COLUMN_TYPE, c.IS_NULLABLE, c.COLUMN_KEY, c.EXTRA FROM information_schema.`COLUMNS` c WHERE c.TABLE_SCHEMA = @TABLE_SCHEMA AND c.TABLE_NAME = @TABLE_NAME;"
            ref lstColumns = dbr.list(db,sql_list_columns,table)

            for m = 0; m < list.count(lstColumns); m+1
            {
                ref column = list.obj(lstColumns,m)
                cname = @@(column,"$COLUMN_NAME")

                new ocolumn { @"name": cname }

                // Definición del tipo de dato.
                switch @@(column,"$DATA_TYPE")
                {
                    case "varchar"
                    {
                        ocolumn<"type"> : "string"
                        ocolumn<"size"> : @@(column,"#CHARACTER_MAXIMUM_LENGTH")
                        break
                    }
                    case "decimal"
                    {
                        ocolumn<"type"> : "decimal"
                        ocolumn<"precision"> : @@(column,"#NUMERIC_PRECISION")
                        ocolumn<"scale"> : @@(column,"#NUMERIC_SCALE")
                        break
                    }
                    case "text"
                    {
                        ocolumn<"type"> : "memo"
                        break
                    }
                    case "mediumtext"
                    {
                        ocolumn<"type"> : "mmemo"
                        break
                    }
                    case "longtext"
                    {
                        ocolumn<"type"> : "lmemo"
                    }
                    case "int"
                    {
                        ocolumn<"type"> : "int"
                        break
                    }
                    case "tinyint"
                    {
                        ocolumn<"type"> : "bool"
                        break
                    }
                    case "bit"
                    {
                        ocolumn<"type"> : "bool"
                        break
                    }
                    default
                    {
                        ocolumn<"type"> : @@(column,"$DATA_TYPE")

                        size = @@(column,"#CHARACTER_MAXIMUM_LENGTH")
                        precision = @@(column,"#NUMERIC_PRECISION")

                        if size > 0 { ocolumn<"size"> : size }
                        else if precision > 0 { ocolumn<"size"> : precision }
                        break
                    }
                }

                // Definición de reestricciones.
                if @@(column,"$COLUMN_KEY") == "UNI" { ocolumn<"isUnique"> : @true }
                if @@(column,"$COLUMN_KEY") == "PRI" { ocolumn<"isKey"> : @true }
                if not(parse.bool(@@(column,"$IS_NULLABLE"))) { ocolumn<"isRequired"> : @true }
                if @@(column,"$EXTRA") == "auto_increment" { ocolumn<"isAutoIncrement"> : @true }

                // Agregar columna.
                otable<"columns/"+cname+"*"> : ocolumn
            }

            // Obtener las relaciones (FK) de una tabla.
            sql_list_fk = "SELECT f.TABLE_NAME, f.COLUMN_NAME, f.REFERENCED_TABLE_NAME, f.REFERENCED_COLUMN_NAME FROM information_schema.KEY_COLUMN_USAGE f WHERE f.TABLE_SCHEMA = @TABLE_SCHEMA AND f.TABLE_NAME = @TABLE_NAME AND f.REFERENCED_TABLE_NAME IS NOT NULL AND f.REFERENCED_COLUMN_NAME IS NOT NULL;"
            ref foreign_keys = dbr.list(db,sql_list_fk,table)

            for m = 0; m < list.count(foreign_keys); m+1
            {
                ref fk = list.obj(foreign_keys,m)

                otable<"columns/"+@@(fk,"$COLUMN_NAME")+"/reference"> : @@(fk,"$REFERENCED_TABLE_NAME")
                otable<"columns/"+@@(fk,"$COLUMN_NAME")+"/keyfield"> : @@(fk,"$REFERENCED_COLUMN_NAME")
            }

            // Obtener los indices de una tabla.
            sql_list_indexes = "SELECT i.INDEX_NAME, GROUP_CONCAT(i.COLUMN_NAME ORDER BY SEQ_IN_INDEX) AS COLUMN_LIST, i.NON_UNIQUE FROM information_schema.STATISTICS i WHERE i.TABLE_SCHEMA = @TABLE_SCHEMA AND i.TABLE_NAME = @TABLE_NAME GROUP BY i.TABLE_NAME, i.INDEX_NAME;"
            ref lstIndexes = dbr.list(db,sql_list_indexes,table)

            for m = 0; m < list.count(lstIndexes); m+1
            {
                ref index = list.obj(lstIndexes,m)
                iname = @@(index,"$INDEX_NAME")

                ref clist = split(@@(index,"$COLUMN_LIST"),",")
                if list.count(clist) > 1
                {
                    // Crear objeto para un nuevo grupo de indice.
                    new oindex
                    {
                        @"name": iname
                        @"type": ifstr(@@(index,"#NON_UNIQUE") == 0, "unique", "")
                        @"columns*": record.create()
                    }

                    go foreach.lstr(value:column) with(clist)
                    {
                        new c { @"name": column }
                        oindex<"columns/"+column+"*"> : c
                    }

                    // Agregar indices.
                    otable<"indexes/"+iname+"*"> : oindex
                }
            }

            // Agregar tabla.
            schema<"tables/"+tname+"*"> : otable
        }

        new sys_model_log
        {
            @"sys_pk": 0
            @"sys_guid": uuid()
            @"sys_dtcreated*": now()
            @"sys_timestamp*": now()
            @"source": @@(info,"$DefaultSchema")
            @"install": to.json(schema)
            @"analisys": "{}"
            @"compatible": @true
            @"success": @true
            @"model": to.json(schema)
        }
        do dbr.insert(db,"sys_model_log",sys_model_log)

        do dbr.close(db)
        // do print(to.json(schema))
        do print("Modelo inferido exitosamente.")
        return @true

        exception
        {
            if dbr.is_open(db){ do dbr.close(db) }
            do print(last_error())
            return @false
        }
    }
}