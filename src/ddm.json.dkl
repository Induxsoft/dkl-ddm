#include "dkli.dkh"
#!
module "ddm.json"
{
	@MODEL="model"
    @ABSTRACT="abstract"
    @ENTITY="entity"
    @FIELD="field"
    @INDEX="index"

    @ALIAS_STRING="str,varchar"
    @ALIAS_BOOL="boolean,bit"
    @ALIAS_INT="integer"
    @ALIAS_MEMO="text"

    @TYPE_STRING="string"
    @TYPE_INT="int"
    @TYPE_DECIMAL="decimal"
    @TYPE_BOOL="bool"
    @TYPE_DATETIME="datetime"
    @TYPE_DATE="date"
    @TYPE_TIME="time"
    @TYPE_MEMO="memo"

    @DEFAULT_PRECISION=12
    @DEFAULT_SCALE=4

    merge_record::&r1,&r2
    {
        if isnull(r1) || isnull(r2) { return }
        ref lc=list.create_from_fields(r1)

        for i=0;i<@count(lc)
        {
            r2<list.str(lc,i)+"*">:@@(r1,"&"+list.str(lc,i))
        }
    }

    addObjectsInherits::&cols, &indexes, parentName, &node, &abstracts
    {
        if @@(node,"$attributes/"+parentName)!=""
        {
            ref parent=@@(abstracts,"&"+@@(node,"$attributes/"+parentName))
            if not(isnull(parent))
            {
                do merge_record(@@(parent,"&columns"),cols)
                do merge_record(@@(parent,"&indexes"),indexes)
            }
            else { do rise_error(0,"El ascendente '"+@@(node,"$attributes/"+parentName)+"' no está definido") }
            
        }
    }

    createTableObject::&node,&abstracts
    {
        new nobj
        {
            @"name":@@(node,"attributes/name")
        }
        ref cols=record.create()
        ref indexes=record.create()

        do addObjectsInherits(cols, indexes, "parent", node,abstracts)
        do addObjectsInherits(cols, indexes, "parent2", node,abstracts)
        do addObjectsInherits(cols, indexes, "parent3", node,abstracts)
        do addObjectsInherits(cols, indexes, "parent4", node,abstracts)
        do addObjectsInherits(cols, indexes, "parent5", node,abstracts)
        
        
        ref objectNodes=@@(node,"&nodes")
        if not(isnull(objectNodes))
        {
            for i=0;i<@count(objectNodes)   
            {
                ref o=@item(objectNodes,i)
                switch @@(o,"name")
                {
                    case @FIELD
                    {
                        cols<@@(o,"attributes/name")+"*">:createColumnObject(o)
                    }
                    case @INDEX
                    {
                        indexes<@@(o,"attributes/name")+"*">:createIndexObject(o)
                    }
                }
            }
        }

        nobj<"columns*">:cols
        nobj<"indexes*">:indexes

        return nobj
    }

    createColumnObject:: &node
    {
        ref nobj=record.create()
        nobj<"name">:@@(node,"attributes/name")

        if @@(node,"$attributes/type")!=""
        {
            if isanyword(tolower(@@(node,"attributes/type")),@ALIAS_STRING) { nobj<"type">:@TYPE_STRING }
            else if isanyword(tolower(@@(node,"attributes/type")),@ALIAS_BOOL) { nobj<"type">:@TYPE_BOOL }
            else if isanyword(tolower(@@(node,"attributes/type")),@ALIAS_INT) { nobj<"type">:@TYPE_INT }
            else if isanyword(tolower(@@(node,"attributes/type")),@ALIAS_MEMO) { nobj<"type">:@TYPE_MEMO }
            else { nobj<"type">:tolower(@@(node,"attributes/type")) }
        }

        qualifiers=tolower(@@(node,"attributes/qualifier1")) + ","+tolower(@@(node,"attributes/qualifier2"))+ ","+tolower(@@(node,"attributes/qualifier3"))+ ","+tolower(@@(node,"attributes/qualifier4"))+ ","+tolower(@@(node,"attributes/qualifier5"))
        if isanyword("unique",qualifiers) { nobj<"isUnique">:@true }
        if isanyword("required",qualifiers) { nobj<"isRequired">:@true }
        if isanyword("autoincrement",qualifiers) { nobj<"isAutoIncrement">:@true }
        if isanyword("key",qualifiers) || isanyword("primarykey",qualifiers) 
        { 
            //nobj<"isUnique">:@true 
            nobj<"isRequired">:@true
            nobj<"isKey">:@true
        }

        if isanyword("indexed",qualifiers) { nobj<"isIndexed">:@true }
        if isanyword("indexed_desc",qualifiers) 
        { 
            nobj<"isIndexed">:@true 
            nobj<"indexDesc">:@true 
        }

        if @@(nobj,"type")==@TYPE_STRING
        {
            nobj<"size">:@@(node,"#attributes/size")
            if @@(nobj,"size")<1 { nobj<"size">:32 }
        }
        else if @@(nobj,"type")==@TYPE_DECIMAL
        {
            nobj<"precision">:@@(node,"#attributes/precision")
            nobj<"scale">:@@(node,"#attributes/scale")

            if @@(nobj,"precision")<1 { bobj<"precision">:@DEFAULT_PRECISION }
            if @@(nobj,"scale")<1 { bobj<"scale">:@DEFAULT_SCALE }
        }
        else
        {
            if @@(node,"#attributes/size")!=0 { nobj<"size">:@@(node,"#attributes/size") }
        }

        if @@(node,"$attributes/reference")!="" { nobj<"reference">:@@(node,"$attributes/reference") }
        if @@(node,"$attributes/keyfield")!="" { nobj<"keyfield">:@@(node,"$attributes/keyfield") }

        return nobj

    }

    createIndexObject::&node
    {
        new nobj{}
        nobj<"name">:@@(node,"$attributes/name")
        if @@(node,"$attributes/type")!="" {nobj<"type">:@@(node,"$attributes/type") }
        if @@(node,"$attributes/algorithm")!="" {nobj<"algorithm">:@@(node,"$attributes/algorithm") }

        nobj<"columns*">:record.create()
        ref objectNodes=@@(node,"&nodes")
        if not(isnull(objectNodes))
        {
            for i=0;i<@count(objectNodes)   
            {
                ref o=@item(objectNodes,i)
                if @@(o,"name")==@FIELD
                {
                    ref fo=record.create()
                    fo<"name">:@@(o,"attributes/name")
                    if tolower(@@(o,"attributes/order"))=="desc"
                    {fo<"desc">:@true}

                    nobj<"columns/"+@@(o,"attributes/name")+"*">: fo
                }
            }
        }

        return nobj
    }


    iterarColumnas::&schema, &func
    {
        //Itera todos los campos de todas las tablas
        ref ts=@@(schema,"&tables")
        ref lt=list.create_from_fields(ts)
        for i=0;i<@count(lt)
        {
            ref t=@@(ts,"&"+list.str(lt,i))
            ref cols=@@(t,"&columns")
            ref lc=list.create_from_fields(cols)

            for j=0;j<@count(lc)
            {
                ref c=@@(cols,"&"+list.str(lc,j))
                if not(isnull(func)) 
                { 
                    that func (schema,t,c ) 
                }
            }
        }
    }

    get_pkfield::&schema, table
    {
        ref t=@@(schema,"&tables/"+table)

        if isnull(t) { return @null }

        ref cols=@@(t,"&columns")
        ref lc=list.create_from_fields(cols)

        for j=0;j<@count(lc)
        {
            ref c=@@(cols,"&"+list.str(lc,j))
            if @@(c,"#isKey") { return c }
        }

        return @null
    }

    fixReference::&schema, &table, &column
    {
        //Deduce los atributos faltantes para las referencias que se indicaron incompletas
        //p.e. No se indicó el campo clave de la entidad referenciada, el tipo del campo o ambas

        if @@(column,"$reference")=="" {return }

        if isnull(@@(schema,"&tables/"+@@(column,"$reference"))) { do rise_error(0,"La tabla '"+@@(column,"$reference")+"' a la que se hace referencia en '"+@@(table,"name")+"' no existe en el modelo.")}

        ref col_ref=@null
        if @@(column,"$keyfield")==""
        {
            //Deducir el nombre del campo al que hace referencia
            ref col_ref=get_pkfield(schema,@@(column,"$reference"))
            if isnull(col_ref)
            {
                do rise_error(0,"No se puede resolver o la columna referenciada de la tabla '"+@@(column,"$reference")+"' desde la tabla '"+@@(table,"name")+"' porque no tiene una clave primaria indicada.")
            }
            column<"keyfield">:@@(col_ref,"name")
        }
        else
        {
            ref col_ref=@@(schema,"&tables/"+@@(column,"$reference")+"/columns/"+@@(column,"$keyfield"))
            if isnull(col_ref)
            {
                do rise_error(0,"La columna '"+@@(column,"$keyfield")+"' referenciada de la tabla '"+@@(column,"$reference")+"' desde la tabla '"+@@(table,"name")+"' no existe.")
            }
        }

        if @@(column,"$type")==""
        {
            column<"type">:@@(col_ref,"type")
            if field.exist(col_ref,"size") { column<"size">:@@(col_ref,"#size") }
            if field.exist(col_ref,"precision") { column<"precision">:@@(col_ref,"#precision") }
            if field.exist(col_ref,"scale") { column<"scale">:@@(col_ref,"#scale") }
        }
    }
    
    fixColumns::&schema
    {
        point f to fixReference

        do iterarColumnas(schema, f)        
    }

    addObjects::&n, &nodes
    {
        for i=0;i<@count(nodes)   
        {
            ref o=@item(nodes,i)
            switch @@(o,"name")
            {
                case @MODEL
                {
                    do addObjects(n,@@(list.obj(nodes,i),"&nodes"))
                }
                case @ABSTRACT
                {
                    do list.add(n,list.obj(nodes,i))
                }
                case @ENTITY
                {
                    do list.add(n,list.obj(nodes,i))
                }
            }
        }
    }

    /**
    * getTableSchema
    *
    * string fsrc Cadena con la ruta y nombre del archivo (.ddm) a procesar.
    * return Devuelve un objeto que representa la estructura del modelo DDM como resultado de la generación de primer paso.
    */
    function getTableSchema(fsrc)
    {
        xml = runscript(fsrc)

        ref obj = parse.xmlStr(xml)
        ref abstracts = record.create()
        ref tables = record.create()
        ref nodes = @@(obj,"&nodes")

        if isnull(nodes) { do rise_error("No hay objetos de bases de datos definidos") }

        ref objectNodes=list.create()
        //Recuperar definiciones en inclusiones de sub-modelos
        do addObjects(objectNodes,nodes)
        //Recuperar las abstracciones
        for i = 0; i < @count(objectNodes)
        {
            ref o=@item(objectNodes,i)
            if @@(o,"name") == @ABSTRACT {
                abstracts<@@(o,"attributes/name")+"*"> : createTableObject(o,abstracts)
            }
        }
        //Recuperar las entidades
        for i = 0; i < @count(objectNodes)   
        {
            ref o=@item(objectNodes,i)
            if @@(o,"name") == @ENTITY {
                tables<@@(o,"attributes/name")+"*"> : createTableObject(o,abstracts)
            }
        }

        new schema
        {
            @"name":@@(obj,"$attributes/name")
            @"tables*":tables
        }
        do fixColumns(schema)

        return schema
    }

    //* ======================================== [ ... ] ========================================

    /**
    * array a Estructura DDM (Json)
    * array b Estructura DDM (Json)
    * list<string> filter Lista de tablas sobre las que hay que comprobar compatibilidad (omitible)
    */
    function ddm.compareTables(a,b,filter)
    {
        ref tables_a = @@(a,"&tables")
        ref tables_b = @@(b,"&tables")

        ref CommonList = list.create()
        ref NewList = list.create()
        ref FilteredList = list.create()

        go foreach.fobj(key:tbl) with(tables_b)
        {
            if field.exist(tables_a,tbl) {
                do list.add(CommonList,tbl)
            } else {
                do list.add(NewList,tbl)
            }
        }

        if not(isnull(filter)) {
            commom_json = to.json(CommonList)
            go foreach.lstr(value:fil) with(filter)
            {
                if contains(commom_json,fil) { do list.add(FilteredList,fil) }
            }
        }

        new result
        {
            @"common*": CommonList
            @"new*": NewList
            @"filtered*": FilteredList
        }

        return result
    }

    function ddm.getCompType(t1,t2)
    {
        if t1 == t2 { return t1 }

        ref cfg = from.json('[
            {"t1":"string", "t2":"memo", "use":"memo"},
            {"t1":"string", "t2":"mmemo", "use":"mmemo"},
            {"t1":"string", "t2":"lmemo", "use":"lmemo"},
            {"t1":"memo", "t2":"mmemo", "use":"mmemo"},
            {"t1":"mmemo", "t2":"lmemo", "use":"lmemo"},
            {"t1":"memo", "t2":"lmemo", "use":"lmemo"},
            {"t1":"int", "t2":"decimal", "use":"decimal"},
            {"t1":"float", "t2":"decimal", "use":"decimal"},
            {"t1":"int", "t2":"bool", "use":"int"},
            {"t1":"date", "t2":"datetime", "use":"datetime"},
        ]')
        
        go foreach.lobj(value:obj) with(cfg) {
            if (@@(obj,"$t1") == t1 && @@(obj,"$t2") == t2) || (@@(obj,"$t1") == t2 && @@(obj,"$t2") == t1) { return @@(obj,"$use") }
        }

        return ""
    }

    /**
    * array a Estructura DDM (Json)
    * array b Estructura DDM (Json)
    * string table Nombre de la tabla al que se compararan sus columnas.
    */
    function ddm.compareColumns(a,b,table)
    {
        ref columns_a = record.caseinsensitive(@@(a,"&tables/"+table+"/columns"))
        ref columns_b = record.caseinsensitive(@@(b,"&tables/"+table+"/columns"))
        compatible = @true

        ref FieldsA = list.create_from_fields(columns_a)
        ref FieldsB = list.create_from_fields(columns_b)
        
        ref UnifiedList = FieldsA
        go foreach.lstr(value:field) with(FieldsB) {
            if not(field.exist(columns_a,field)) { do list.add(UnifiedList,field) }
        }

        ref ActionList = list.create()
        go foreach.lstr(value:field) with(UnifiedList)
        {
            new ComparedColumn
            {
                @"table": table
                @"column": field
                @"action": ""
            }

            ref column_a = @@(columns_a,"&"+field)
            ref column_b = @@(columns_b,"&"+field)

            if isnull(column_a) && (not(@@(column_b,"#isRequired")) && not(@@(column_b,"#isKey")))
            {
                ComparedColumn<"action"> : "new"
                ComparedColumn<"new*"> : column_b
            }
            else if isnull(column_a) && (@@(column_b,"#isRequired") || @@(column_b,"#isKey"))
            {
                compatible = @false
                ComparedColumn<"action"> : "incompatible"
                ComparedColumn<"message"> : "No se puede añadir el campo porque tiene establecido el atributo 'required' o es 'PrimaryKey'."
            }
            else if not(isnull(column_a)) && not(isnull(column_b))
            {
                same_type = (@@(column_a,"$type") == @@(column_b,"$type"))
                same_precision = (@@(column_a,"#precision") == @@(column_b,"#precision"))
                same_scale = (@@(column_a,"#scale") == @@(column_b,"#scale"))
                same_size = (@@(column_a,"#size") == @@(column_b,"#size"))
                both_unique = (@@(column_a,"#isUnique") == @@(column_b,"#isUnique"))
                both_require = (@@(column_a,"#isRequired") == @@(column_b,"#isRequired"))
                both_key = (@@(column_a,"#isKey") == @@(column_b,"#isKey"))
                both_autoincrement = (@@(column_a,"#isAutoIncrement") == @@(column_b,"#isAutoIncrement"))

                if same_type && same_precision && same_scale && same_size && both_require && both_unique && both_key && both_autoincrement
                {
                    ComparedColumn<"action"> : "nothing"
                }
                else if same_type && same_precision && same_scale && same_size 
                {
                    compatible = @false
                    
                    ComparedColumn<"action"> : "incompatible"
                    message = ""
                    if not(both_unique) { message = "El valor del atributo 'unique' es diferente en ambos modelos de tabla." }
                    if not(both_require) { message = "El valor del atributo 'required' es diferente en ambos modelos de tabla." }
                    if not(both_key) { message = "El valor del atributo 'key' es diferente en ambos modelos de tabla." }
                    ComparedColumn<"message"> : message
                }
                else 
                {
                    comp_type = ddm.getCompType(@@(column_a,"$type"), @@(column_b,"$type"))

                    ComparedColumn<"action"> : "change"
                    if comp_type == ""
                    {
                        compatible = @false
                        ComparedColumn<"action"> : "incompatible"
                        ComparedColumn<"message"> : "No se encontro una definición para los tipos de datos. [cur <> new -> comp]"
                    }

                    new change
                    {
                        @"curr_type": @@(column_a,"$type")
                        @"new_type": @@(column_b,"$type")
                        @"comp_type": comp_type
                    }

                    switch comp_type
                    {
                        case "memo" { break }
                        case "mmemo" { break }
                        case "lmemo" { break }
                        case "blob" { break }
                        case "mediumblob" { break }
                        case "longblob" { break }
                        case "string"
                        {
                            change<"curr_size"> : @@(column_a,"#size")
                            change<"new_size"> : @@(column_b,"#size")

                            change<"comp_size"> : if(@@(column_a,"#size") > @@(column_b,"#size"), @@(column_a,"#size"), @@(column_b,"#size"))
                            break
                        }
                        case "decimal"
                        {
                            change<"curr_precision"> : @@(column_a,"#precision")
                            change<"curr_scale"> : @@(column_a,"#scale")

                            change<"new_precision"> : @@(column_b,"#precision")
                            change<"new_scale"> : @@(column_b,"#scale")

                            int32 = 10 // Valor Maximo: 2.147.483.647
                            max_precision = if(@@(column_a,"#precision") > @@(column_b,"#precision"), @@(column_a,"#precision"), @@(column_b,"#precision"))
                            max_scale = if(@@(column_a,"#scale") > @@(column_b,"#scale"), @@(column_a,"#scale"), @@(column_b,"#scale"))

                            if same_type { max_precision = (max_precision + max_scale) }
                            else { max_precision = (int32 + max_scale) }

                            change<"comp_precision"> : max_precision
                            change<"comp_scale"> : max_scale
                            break
                        }
                        default
                        {
                            if @@(column_a,"#size") != 0 || @@(column_b,"#size") != 0
                            {
                                change<"curr_size"> : @@(column_a,"#size")
                                change<"new_size"> : @@(column_b,"#size")

                                change<"comp_size"> : if(@@(column_a,"#size") > @@(column_b,"#size"), @@(column_a,"#size"), @@(column_b,"#size"))
                            }
                            break
                        }
                    }

                    ComparedColumn<"change*"> : change
                }
            }

            do list.add(ActionList,ComparedColumn)
        }

        new result
        {
            @"compatible": compatible
            @"actions*": ActionList
        }

        return result
    }

    function ddm.analyze(srcA,srcB,filter)
    {
        ref a = from.json(file.rtext(srcA))
        ref b = from.json(file.rtext(srcB))

        ref UnifiedTables = ddm.compareTables(a,b,filter)
        ref NewTables = record.create()
        ref ComparedColumns = list.create()
        // Comparar columnas de las tablas comunes o filtradas.
        ref listCommonTables = ifnull(@@(UnifiedTables,"&filtered"),list.create())
        if list.count(listCommonTables) == 0 { ref listCommonTables = @@(UnifiedTables,"&common") }
        go foreach.lstr(value:tabla) with(listCommonTables)
        {
            ref cc = ddm.compareColumns(a,b,tabla)
            do list.add(ComparedColumns,cc)
        }
        // Extraer nuevas tablas
        ref listNewTables = ifnull(@@(UnifiedTables,"&new"),list.create())
        if list.count(listNewTables) > 0 {
            go foreach.lstr(value:tbl) with(listNewTables)
            {
                NewTables<tbl+"*"> : @@(b,"&tables/"+tbl)
            }
        }

        new result
        {
            @"analysis*": UnifiedTables
            @"tables*": NewTables
            @"compatibility*": ComparedColumns
        }

        return result
    }
}