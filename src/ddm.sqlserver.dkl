#include "dkli.dkh"
#!
program
{
    #include "functions.dkh"
    #include "serialize.dkh"

    create_tables::&tables, &sentences
    {
        if isnull(tables) { return }

        ref lt=list.create_from_fields(tables)

        for i=0;i<@count(lt)
        {
            sql=create_table(@@(tables, "&"+list.str(lt,i)))
            if trim(sql)!="" { do list.add(sentences,sql) }
        }
    }

    create_references::&tables, &sentences
    {
        if isnull(tables) { return }

        ref lt=list.create_from_fields(tables)

        for i=0;i<@count(lt)
        {
            ref t=@@(tables,"&"+ list.str(lt,i))
            ref lf=list.create_from_fields(@@(t,"&columns"))

            for j=0;j<@count(lf)
            {
                ref f=@@(t,"&columns/"+list.str(lf,j))
                sql=create_reference(get_name(t), f, tables )
                if trim(sql)!="" { do list.add(sentences,sql) }
            }
        }
    }

    create_reference::table, &column, &tables
    {
        if @@(column,"$reference")=="" {return "" }
        
        return "ALTER TABLE "+table+" ADD FOREIGN KEY ("+get_name(column)+") REFERENCES "+get_name(@@(tables,"&"+@@(column,"$reference")))+"("+@@(column,"$keyfield")+");"

        exception{do print(last_error())}

        return ""
    }

    create_indexes::&tables, &sentences
    {
        if isnull(tables) { return }

        ref lt=list.create_from_fields(tables)

        for i=0;i<@count(lt)
        {
            ref li=list.create_from_fields(@@(tables,"&"+list.str(lt,i)+"/indexes"))
            for j=0;j<@count(li)
            {
                tn=get_name( @@(tables,"&"+list.str(lt,i)) )
                ref idxo=@@(tables, "&"+ list.str(lt,i)+"/indexes/" + list.str(li,j) )
                sql=create_index(tn ,idxo)
                if trim(sql)!="" { do list.add(sentences,sql) }
            }
        }
    }

    create_index::table, &idx
    {
        sql= "CREATE"+ifstr(tolower(@@(idx,"$type"))=="unique"," UNIQUE", "")+" INDEX "+get_name(idx)+" ON "+table
        sql=sql+" ("

        ref cols=@@(idx,"&columns")
        ref lc=list.create_from_fields(cols)

        for i=0;i<@count(lc)
        {
            sql=sql+ifstr(i>0,", ","")+get_name(@@(cols,"&"+list.str(lc,i)))+ifstr(@@(cols,"#"+list.str(lc,i)+"/desc")," DESC","")
        }
        sql=sql+");"
        return sql
    }

    get_name::&obj
    {
        return ifstr(@@(obj,"$alias")!="", @@(obj,"$alias"), @@(obj,"$name"))
    }

    get_type::&field
    {
        switch @@(field,"type")
        {
            case "bool" { return "BIT"}
            case "int" { return "INT"}
            case "memo" { return "VARCHAR(MAX)"}
            case "datetime" { return "DATETIME"}
            case "time" { return "TIME"}
            case "date" { return "DATE"}
            case "decimal" { return "DECIMAL("+@@(field,"$precision")+","+@@(field,"$scale")+")" }
            case "string" { return "VARCHAR("+@@(field,"$size")+")" }
        }

        return @@(field,"$type") + ifstr(@@(field,"#size")!=0,"("+@@(field,"$size")+")","")
    }

    create_field::&field
    {
        sql=get_name(field)+" "+get_type(field)
        return sql
    }

    create_table::&table
    {
        table_name=get_name(table)
        sql= "CREATE TABLE "+table_name+" (\r\n"

        ref lf=list.create_from_fields(@@(table,"&columns"))
        for i=0;i<@count(lf)
        {
            sql=sql + ifstr(i>0,",\r\n\t","\t") + create_field(@@(table,"&columns/"+list.str(lf,i)))
            if @@(table,"#columns/"+list.str(lf,i)+"/isRequired") { sql=sql+" NOT NULL" }
            if @@(table,"#columns/"+list.str(lf,i)+"/isAutoIncrement") { sql=sql+" IDENTITY(1,1)" }
            if @@(table,"#columns/"+list.str(lf,i)+"/isUnique") { sql=sql+" UNIQUE" }
            if @@(table,"#columns/"+list.str(lf,i)+"/isKey") { sql=sql+" PRIMARY KEY" }
        }

        return sql+"\r\n);"
    }

    schema2sqlserver::&schema
    {
        ref sentences=list.create()

        do create_tables(@@(schema,"&tables"),sentences)
        do create_indexes(@@(schema,"&tables"),sentences)
        do create_references(@@(schema,"&tables"),sentences)
        return sentences
        
    }

    ref sentences=schema2sqlserver(@@(@context,"&schema"))
    ref buffer=text.create()
    
    for i=0;i<@count(sentences)
    {
        do text.say(buffer,list.str(sentences,i))
    }

    @context<"output">:"text"
    @context<"text">:text.get(buffer)
}